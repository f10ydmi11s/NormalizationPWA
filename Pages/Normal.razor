@page "/normal"

<div class="row">
    <div class="col d-flex justify-content-center">
        <h3>Data Normalize and Schema Creation</h3>
    </div>
</div>
<div class="row">
    <div class="col d-flex justify-content-center">
        LHS = Left Hand Side, FD = Functional Dependencies, RHS = Right Hand Side, R = Relation
    </div>
</div>
<br />
<div class="row">
    <div class="col">
        <h3>Attributes</h3> When entering text separate values using a comma ( , )
    </div>
</div>
<textarea rows="2"
          class="form-control"
          style="resize:both;"
          @bind="newFields"
          oninput="this.style.height = 'auto'; this.style.height = (this.scrollHeight) + 'px';">
</textarea>
<h3>Sample Data</h3>
<hr />
<textarea rows="4"
          class="form-control"
          style="resize:both;"
          @bind="newData"
          oninput="this.style.height = 'auto'; this.style.height = (this.scrollHeight) + 'px';">
</textarea>
<br />

<hr />
<div class="card">
    <div class="card-header"><h3>Relations (@fds.Count(fd => !fd.IsDone))</h3></div>
    <div class="card-body">
        @foreach (var fd in fds)
        {

            <div class="row mt-2">
                <div class="col">
                    <input class="form-control bg-primary text-white" disabled="@IsFdDisabled" @bind="fd.Lhs" />
                </div>
                <div class="col-1 d-flex justify-content-center">
                    <span class="oi oi-arrow-thick-right" aria-hidden="true"></span>
                </div>
                <div class="col">
                    <input class="form-control bg-success text-white" disabled="@IsFdDisabled" @bind="fd.Rhs" />
                </div>
                <div class="col-2">
                    @*<label class="form-check-label">
                            <input class="form-check-input" type="checkbox" @bind="fd.IsDone" />
                        </label>*@
                    <button class="btn btn-danger btn-xs" @onclick="()=> RemoveRelation(fd)" title="Remove"><span class="oi oi-minus" aria-hidden="true"></span></button>
                </div>
            </div>

        }
        <div class="row">
            <div class="col">
                LHS
            </div>
            <div class="col-1 d-flex justify-content-center">
                FD
            </div>
            <div class="col">
                RHS
            </div>
            <div class="col-2">

            </div>
        </div>
        <div class="row">
            <div class="col">
                @*<input class="form-control btn-outline-primary" placeholder="..." @bind-value="newFdLhs"
                    @bind-value:event="oninput"
                    @onkeyup="@HandleKeyUp" />*@
                <input class="form-control btn-outline-primary" placeholder="..." @bind="newFdLhs" />
            </div>
            <div class="col-1 d-flex justify-content-center">
                <span class="oi oi-arrow-thick-right" aria-hidden="true"></span>
            </div>
            <div class="col">
                <input class="form-control btn-outline-success" placeholder="..." @bind="newFdRhs" />
            </div>
            <div class="col-2">
                <button class="btn btn-outline-dark" @onclick="@AddRelation" title="Add"><span class="oi oi-plus" aria-hidden="true"></span></button>
            </div>
        </div>
    </div>
    <div class="card-footer">
        <div class="row mt-2">
            <div class="col">
                <button class="btn btn-info" disabled="@IsDisabled" @onclick="@ValidateData" title="Reload"><span class="oi oi-reload" aria-hidden="true"></span></button> Refresh data
            </div>
            <div class="col">
                <button class="btn btn-info" @onclick="LoadExamples" title="Load Example"><span class="oi oi-file" aria-hidden="true"></span></button> Load Example Data
                @*               <button class="btn btn-info" disabled="@IsDisabled" @onclick="@Normalize" title="Normalize"><span class="oi oi-layers" aria-hidden="true"></span></button> Normalize data*@
            </div>
        </div>
        <div class="row mt-2">
            <div class="col">
                <button class="btn btn-danger" disabled="@IsDisabled" @onclick="ClearAll" title="Clear All"><span class="oi oi-trash" aria-hidden="true"></span></button> Clear all
                @*               <button class="btn btn-info" disabled="@IsDisabled" @onclick="SchemaScript" title="Show Schema"><span class="oi oi-script" aria-hidden="true"></span></button> Produce data schema*@
            </div>
            <div class="col">
            </div>
        </div>
        <div class="row mt-2">
            <div class="col">
            </div>
            <div class="col">

            </div>
        </div>
    </div>
</div>
<br />
<h3>Output</h3>
<hr />
<div class="card">
    <div class="card-header"><h3>Normalized (@tbs.Count(tb => !tb.IsDone))</h3></div>
    <div class="card-body">
        @foreach (var tb in tbs)
        {

            <div class="row mt-2">
                <div class="col">
                    <input class="form-control bg-primary text-white" disabled="@IsFdDisabled" @bind="tb.TableName" />
                </div>
                <div class="col-1 d-flex justify-content-center">
                    <span class="oi oi-arrow-thick-right" aria-hidden="true"></span>
                </div>
                <div class="col">
                    <input class="form-control bg-success text-white" disabled="@IsFdDisabled" @bind="tb.FDs" />
                </div>
                <div class="col-2">

                </div>
            </div>

        }
    </div>
    <div class="card-footer">
        <div class="row mt-2">
            <div class="col d-flex justify-content-center">
                <h3>@ShowStages()</h3>
            </div>
        </div>
        <div class="row mt-2">
            <div class="col">
                <input type="range"
                       min="0"
                       max="4"
                       step="1"
                       class="form-control"
                       @bind-value="@SliderValue"
                       @bind-value:event="oninput" />
            </div>
        </div>
        <div class="row mt-2">
            <div class="col">
                <input type="checkbox" @bind-value="@showSchema"
                       @bind-value:event="oninput" /> Include Schema
            </div>
        </div>
    </div>
</div>
<br />
<div>@resultText</div>
<br />
@if (showSchema)
{
    <h3>Schema</h3>
    <hr />
    <div>@schemaText</div>
}

@if (showModal)
{
    <div class="modal fade show" id="myModal" style="display:block" aria-modal="true" role="dialog" @onclick="@ModalCancel">
        <div class="modal-dialog" @onclick:stopPropagation="true">
            <div class="modal-content">

                <!-- Modal Header -->
                <div class="modal-header">
                    <h4 class="modal-title">@messageTitle</h4>
                    <button type="button" class="close" @onclick="@ModalCancel">&times;</button>
                </div>

                <!-- Modal body -->
                <div class="modal-body">
                    <p>@message</p>
                </div>

                <!-- Modal footer -->
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" @onclick="@ModalCancel">Close</button>
                    @*<button type="button" class="btn btn-danger" @onclick=@ModalOk>Delete</button>*@
                </div>

            </div>
        </div>
    </div>
}

@code {
    private IList<FunctionalDependencies> fds = new List<FunctionalDependencies>();
    private IList<FunctionalDependencies> fdsSteps = new List<FunctionalDependencies>();
    private IList<NormalFormTables> tbs = new List<NormalFormTables>();
    private string newFdLhs;
    private string newFdRhs;
    private string newFields;
    private string newData;
    private MarkupString resultText;
    private MarkupString schemaText;
    private string htmlText { get; set; }
    private string message;
    private string messageTitle;
    protected bool IsDisabled { get; set; } = true;
    protected bool IsFdDisabled { get; set; } = false; //true;

    string[] stages = new string[5]
    {
        "Not normalized",
        "1st Normal Form",
        "2nd Normal Form",
        "3rd Normal Form",
        "Normalized to BCNF"
                            };
    private int SliderValue { get; set; } = 0;
    bool showModal = false;
    public bool showSchema { get; set; } = false;

    public string ShowStages()
    {
        string message = "Did not normalize.";
        switch (SliderValue)
        {
            case 1:
                if (MinimalCover())
                {
                    message = stages[SliderValue];
                }
                else
                {
                    //SliderValue = 0;
                    //this.StateHasChanged();
                    //message = stages[SliderValue];
                }
                break;
            case 2:
                message = stages[SliderValue];
                break;
            case 3:
                message = stages[SliderValue];
                break;
            case 4:
                message = stages[SliderValue];
                break;
            default:
                message = stages[SliderValue];
                break;
        }
        if (showSchema)
        {
            SchemaScript();
        }
        return message;
    }

    void ModalShow()
    {
        showModal = true;
    }
    void ModalCancel()
    {
        showModal = false;
    }

    void ModalOk()
    {
        Console.WriteLine("Modal ok");
        showModal = false;
    }

    private void formatdata()
    {
        if (!string.IsNullOrWhiteSpace(newFields))
        {
            string[] fieldlist = newFields.ToUpper().Split(',');
            var resultfield = fieldlist.Distinct(StringComparer.OrdinalIgnoreCase).ToArray();
            newFields = string.Join(",", resultfield);

            string[] lhslist = newFdLhs.ToUpper().Split(',');
            var resultlhs = lhslist.Distinct(StringComparer.OrdinalIgnoreCase).ToArray();
            string[] lhslistnotin = resultlhs.Intersect<string>(resultfield).ToArray<string>();

            newFdLhs = string.Join(",", lhslistnotin);

            string[] rhslist = newFdRhs.ToUpper().Split(',');
            string[] resultrhs = rhslist.Distinct(StringComparer.OrdinalIgnoreCase).ToArray();
            string[] rhslistnotin = resultrhs.Intersect<string>(resultfield).ToArray<string>();

            newFdRhs = string.Join(",", rhslistnotin);
        }
    }

    private void LoadExamples()
    {
        //newFields = "ID,NAME,AGE,ADDRESS,ORDERS";
        //newData = "100,Sachin,36,Lower West Side,Cannon XL-200,\n100,Sachin,36,Lower West Side,Battery XL-200,\n100,Sachin,36,Lower West Side,Tripod Large";

        //fds.Clear();
        //fds.Add(new FunctionalDependencies { Lhs = "ID", Rhs = "ORDERS" });
        //fds.Add(new FunctionalDependencies { Lhs = "ID", Rhs = "NAME" });
        //fds.Add(new FunctionalDependencies { Lhs = "NAME", Rhs = "AGE,ADDRESS" });

        //newFields = "A, B, C, D, E";
        //newData = "100,Sachin,36,Lower West Side,Cannon XL-200,\n100,Sachin,36,Lower West Side,Battery XL-200,\n100,Sachin,36,Lower West Side,Tripod Large";

        //fds.Clear();
        //fds.Add(new FunctionalDependencies { Lhs = "A", Rhs = "B,C" });
        //fds.Add(new FunctionalDependencies { Lhs = "C,D", Rhs = "E" });
        //fds.Add(new FunctionalDependencies { Lhs = "B", Rhs = "D" });
        //fds.Add(new FunctionalDependencies { Lhs = "E", Rhs = "A" });

        //newFields = "A, B, C, D, E, F";
        //newData = "100,Sachin,36,Lower West Side,Cannon XL-200,\n100,Sachin,36,Lower West Side,Battery XL-200,\n100,Sachin,36,Lower West Side,Tripod Large";

        //fds.Clear();
        //fds.Add(new FunctionalDependencies { Lhs = "D,F", Rhs = "C" });
        //fds.Add(new FunctionalDependencies { Lhs = "B,C", Rhs = "F" });
        //fds.Add(new FunctionalDependencies { Lhs = "E", Rhs = "A" });
        //fds.Add(new FunctionalDependencies { Lhs = "A,B,C", Rhs = "E" });

        //newFields = "A, B, C, D, E";
        //newData = "100,Sachin,36,Lower West Side,Cannon XL-200,\n100,Sachin,36,Lower West Side,Battery XL-200,\n100,Sachin,36,Lower West Side,Tripod Large";

        //fds.Clear();
        //fds.Add(new FunctionalDependencies { Lhs = "A", Rhs = "B" });
        //fds.Add(new FunctionalDependencies { Lhs = "A,B", Rhs = "D" });
        //fds.Add(new FunctionalDependencies { Lhs = "D", Rhs = "A" });
        //fds.Add(new FunctionalDependencies { Lhs = "C", Rhs = "E" });


        newFields = "A, B, C, D, E, F";
        newData = "100,Sachin,36,Lower West Side,Cannon XL-200,\n100,Sachin,36,Lower West Side,Battery XL-200,\n100,Sachin,36,Lower West Side,Tripod Large";

        fds.Clear();
        fds.Add(new FunctionalDependencies { Lhs = "A,B,C", Rhs = "C,D,E,F" });
        fds.Add(new FunctionalDependencies { Lhs = "C", Rhs = "E" });
        fds.Add(new FunctionalDependencies { Lhs = "A", Rhs = "B" });
        fds.Add(new FunctionalDependencies { Lhs = "D", Rhs = "F" });

        newFdLhs = string.Empty;
        newFdRhs = string.Empty;
        IsDisabled = false;
    }

    private void ValidateData()
    {
        //formatdata();
        //fixData();

        if (!string.IsNullOrWhiteSpace(newFields))
        {
            bool rem = false;
            bool remLhs = true;
            bool remRhs = true;
            string[] fieldstemp = newFields.ToUpper().Split(',');
            foreach (var fd in fds.ToList())
            {
                remRhs = true;
                string[] fldRhs = fd.Rhs.ToUpper().Split(',');
                foreach (string item in fieldstemp)
                {
                    foreach (string itemRhs in fldRhs)
                    {
                        if (item == itemRhs) { remRhs = false; }
                    }
                }

                remLhs = true;
                string[] fldLhs = fd.Lhs.ToUpper().Split(',');
                foreach (string item in fieldstemp)
                {
                    foreach (string itemLhs in fldLhs)
                    {
                        if (item == itemLhs) { remLhs = false; }
                    }
                }

                if (remRhs || remLhs) { fds.Remove(fd); rem = true; }
            }
            if (rem)
            {
                this.StateHasChanged();
            }
        }
    }

    private void AddRelation()
    {
        ValidateData();

        if (
        !string.IsNullOrWhiteSpace(newFdLhs) &&
        !string.IsNullOrWhiteSpace(newFdRhs) &&
        !string.IsNullOrWhiteSpace(newFields)
        )
        {
            bool isduplicate = false;
            foreach (var fd in fds)
            {
                if (fd.Lhs == newFdLhs && fd.Rhs == newFdRhs)
                { isduplicate = true; }
            }
            if (!isduplicate)
            {
                fds.Add(new FunctionalDependencies { Lhs = newFdLhs, Rhs = newFdRhs });
                newFdLhs = string.Empty;
                newFdRhs = string.Empty;
                IsDisabled = false;
            }
            else
            {
                // Do Something ...
                messageTitle = "Warning Message!";
                message = "Relation already exists.";
                ModalShow();
            }
        }

    }
    private void ClearAll()
    {
        newFields = string.Empty;
        newData = string.Empty;
        newFdLhs = string.Empty;
        newFdRhs = string.Empty;
        fds.Clear();
    }

    private void fixData()
    {
        if (!string.IsNullOrWhiteSpace(newData))
        {
            string[] datalist = newData.Replace("\n", String.Empty).ToUpper().Split(',');
            string[] fieldstemp = newFields.ToUpper().Split(',');
            string datatemp = string.Empty;
            string comma = ",";
            int totalElements = fieldstemp.Length;
            int totalDataElements = datalist.Length;
            int lastDataElement = 1;
            int i = 1;

            foreach (string item in datalist)
            {
                if (totalDataElements == lastDataElement)
                { comma = string.Empty; }

                if (i < totalElements)
                {
                    datatemp = datatemp + item + comma;
                    i++;
                }
                else
                {
                    datatemp = datatemp + item + comma + "\n";
                    i = 1;
                }
                lastDataElement++;
            }
            newData = datatemp;
        }

    }

    private void RemoveRelation(FunctionalDependencies relation)
    {
        if (relation != null)
        {
            fds.Remove(relation);
        }
    }
    private bool MinimalCover()
    {
        htmlText = string.Empty;
        fdsSteps.Clear();

        // Step 1: Rewrite the FD into those with only one attribute on RHS.
        foreach (var fd in fds.ToList())
        {
            string[] fldRhs = fd.Rhs.ToUpper().Split(',');

            foreach (string itemRhs in fldRhs)
            {
                fdsSteps.Add(new FunctionalDependencies { Lhs = fd.Lhs, Rhs = itemRhs });
                htmlText = htmlText + "Step 1: " + fd.Lhs + " -> " + itemRhs + "<br />";

            }
        }

        // Step 2: Remove trivial FDs (those where the RHS is also in the LHS)
        foreach (var fdsStep in fdsSteps.ToList())
        {
            string[] fdsStepLhs = fdsStep.Lhs.ToUpper().Split(',');

            foreach (string itemLhs in fdsStepLhs)
            {
                if (itemLhs == fdsStep.Rhs)
                {
                    //htmlText = htmlText + "Remove " + fdsStep.Lhs + " -> " + fdsStep.Rhs + "<br />";
                    fdsSteps.Remove(fdsStep);
                }
            }
        }
        foreach (var fdsStep in fdsSteps)
        {
            htmlText = htmlText + "Step 2: " + fdsStep.Lhs + " -> " + fdsStep.Rhs + "<br />";
        }
        // Step 3: Minimize LHS of each FD.
        foreach (var fdsStep in fdsSteps.ToList())
        {
            string[] fdsStepLhs = fdsStep.Lhs.ToUpper().Split(',');

            if (fdsStepLhs != null)
            {
                //foreach (string itemLhs in fdsStepLhs)
                //{
                //    fdsSteps.Add(new FunctionalDependencies { Lhs = itemLhs, Rhs = fdsStep.Rhs });
                //}
                if (fdsStepLhs.Count() <= 2)
                {
                    fdsSteps.Add(new FunctionalDependencies { Lhs = fdsStepLhs.First(), Rhs = fdsStep.Rhs });
                }
                else
                {
                    fdsSteps.Add(new FunctionalDependencies { Lhs = fdsStepLhs.First() + "," + fdsStepLhs.Last(), Rhs = fdsStep.Rhs });
                }
                fdsSteps.Remove(fdsStep);
            }
        }
        fdsSteps = fdsSteps.Distinct().ToList();
        foreach (var fdsStep in fdsSteps)
        {
            htmlText = htmlText + "Step 3: " + fdsStep.Lhs + " -> " + fdsStep.Rhs + "<br />";
        }
        // Step 4: Remove redundant FDs (those that are implied by others)


        foreach (var fdsStep in fdsSteps)
        {
            htmlText = htmlText + "Step 4: " + fdsStep.Lhs + " -> " + fdsStep.Rhs + "<br />";
        }


        DisplayResult();
        if (!string.IsNullOrWhiteSpace(htmlText))
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    private void Normalize()
    {
        MinimalCover();

    }
    private void SchemaScript()
    {
        htmlText = string.Empty;
        htmlText = "Do Something ...";
        schemaText = new MarkupString(htmlText);
    }

    private void DisplayResult()
    {
        resultText = new MarkupString(htmlText);
    }

}
